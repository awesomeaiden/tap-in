"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const app_1 = require("../app");
const utils = __importStar(require("../utils"));
// Registers a new user in the database and initializes empty profile.
const registerUser = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    // Parse user registration info
    let regInfo = req.body;
    let newUser = {
        email: regInfo.auth.email,
        passHash: utils.hash(regInfo.auth.pass),
        bio: regInfo.bio
    };
    // Add user to database
    let usersRef = app_1.db.ref("/users");
    let newUserRef = usersRef.push(newUser);
    // Get unique user ID generated by firebase
    let userID = newUserRef.key;
    // Create empty profile for new user
    let profileRef = app_1.db.ref("/profiles");
    profileRef.set({
        [userID]: []
    });
    // Generate new API token
    let token = utils.hash(userID);
    let hashedToken = utils.hash(token);
    // Store hashedToken in database
    let tokensRef = app_1.db.ref("/tokens");
    tokensRef.set({
        [hashedToken]: userID
    });
    // Return token to user
    let tokenResponse = {
        token: token
    };
    return res.status(201).json(tokenResponse);
});
exports.default = { registerUser };
//# sourceMappingURL=users.js.map